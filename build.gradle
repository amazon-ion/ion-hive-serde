/*
 * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

// sets up kotlin plugin
buildscript {
    ext.kotlin_version = '[1.2.0,1.4.10)'
    ext.ionjava_version = '[1.4.0,2.0.0)'
    ext.pathextraction_version = '[1.2.0,2.0.0)'
    ext.hive_version = '[2.3.0,2.4.0)'
    ext.hadoop_version = '[2.7.0,2.8.0)'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        mavenCentral()
    }

    apply plugin: "kotlin"


    configurations {
        // to make compileOnly available to testing scope
        testCompile.extendsFrom(compileOnly)
    }

    dependencies {
        // using kotlin to make tests less verbose
        testCompile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

        testCompile "junit:junit:[4.0.0,5.0.0)"
        testCompile "pl.pragmatists:JUnitParams:[1.1.0,1.2.0)"
    }

    apply plugin: 'checkstyle'
    checkstyle {
        toolVersion = "8.18"
        ignoreFailures = false
        maxWarnings = 0
        maxErrors = 0
        configDir = file("$rootProject.projectDir/config/checkstyle")
    }
    tasks.withType(Checkstyle) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }
}

// clean all subprojects
task cleanAll {
    subprojects.each {
        it.afterEvaluate {
            def cleanTask = it.tasks.findByName('clean')
            if (cleanTask) {
                dependsOn(cleanTask)
            }
        }
    }

    dependsOn(clean)
}
